//快乐数

/*
    编写一个算法来判断一个数 n 是不是快乐数。
    「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，
    然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。
    如果 n 是快乐数就返回 True ；不是，则返回 False。

    解析:
         n       next
        9        81
        99       162
        999      243
        9999     324
        判断规律：
        0 ~ 10000 中， 只有当 n<=99 时，才存在next > n 的情况；

        总结可知：
            存在两种情况：
                1.为快乐数，和为1
                2.不为快乐数，陷入循环（排除持续增长的情况）

        当重复时，就不快乐；
        简单方法：使用hash表保存数字；
        缺点：可能会开辟过多的空间
*/

unordered_set<int> _s;

bool isHappy(int n)
{
    _s.insert(n);
    if(n == 1)
    {
        return true;
    }

    int sum = 0;
    while(n != 0)
    {
        sum += (n%10)*(n%10);
        n /= 10;
    }
    
    if(_s.find(sum) == _s.end())
    {
        return isHappy(sum);
    }
    return false;
}